var DEBUG=true;const gather_data_fail=0;var DataModel=function(){this.ajaxUrl=null;this.headers=null;this.type="POST";this.dataType="json";this.postData=null;this.emptyCheckBoxVal="OFF";this.form=null;this.errorArrayName="";this.setRootForm=function(a){if(typeof a=="string"&&$(a).length>0||$(a).length>0){this.form=$(a);return true}return false};this.gatherData=function(a){if(this.setRootForm(a)){data=new Array;data[0]=$(this.form).find("input[type!=radio]");data[1]=$(this.form).find("textarea");data[2]=$(this.form).find("select");data[3]=$(this.form).find("input[type=radio]:checked");var c={};var d=this.emptyCheckBoxVal;var e=null;$.each(data,function(a,f){if(f[0]!=undefined){if(c==null)c={};$.each(f,function(a,f){var g=null;if($(f).attr("name"))if($(f).attr("name").indexOf("[",0)!=-1){if($(f).attr("type")=="checkbox"&&d=="")return true;attr=$(f).attr("name");if(/\[\]/g.test(attr)){g=a}attr=attr.split("[");group=attr[0];if(!g)g=attr[1].replace("]","");if(attr.length>2){if(!g)g=attr[attr.length-1].replace("]","");attr=attr.slice(1,attr.length);var h={};$.each(attr.reverse(),function(a,c){c=c.replace("]","");attr[a]=c;if(a==0){if($(f).attr("type")=="checkbox"){if($(f).attr("checked")==true||$(f).attr("checked")=="checked"){h[g]=$(f).val()}else{h[g]=$(f).val()}}else{h[g]=$(f).val()}}else{b=h;h={};h[c]=b}});if(e==null){e=h}else{e=e.merge(h)}}else{if(c[group]==undefined)c[group]={};if($(f).attr("type")=="checkbox"){if($(f).attr("checked")==true||$(f).attr("checked")=="checked"){if(c[group][g]==undefined)c[group][g]={};c[group][g][a]=$(f).val()}else if(d!=""){if(c[group][g]==undefined)c[group][g]={};c[group][g][a]=d}}else c[group][g]=$(f).val()}}else if($(f).attr("type")=="checkbox"){if($(f).attr("checked")==true||$(f).attr("checked")=="checked"){if(c[$(f).attr("name")]==undefined)c[$(f).attr("name")]={};c[$(f).attr("name")]=$(f).val()}else if(d!=""){if(c[$(f).attr("name")]==undefined)c[$(f).attr("name")]={};c[$(f).attr("name")]=d}}else c[$(f).attr("name")]=$(f).val()})}});c=jQuery.extend(c,e);if(c==null)this.postData=gather_data_fail;else{this.postData=c}}else if(DEBUG==true){console.log("WARNING: object passed to gatherData doesn't exist")}return c};this.mergeDataWithObject=function(a){this.postData=jQuery.extend(this.postData,a)};this.post=function(a){if(this.ajaxUrl==null||this.ajaxUrl==""){this.ajaxUrl=this.form.attr("action")}var b=this.errorArrayName;if(this.ajaxUrl!=null&&this.ajaxUrl!=""&&this.postData!=null){$.ajax({url:this.ajaxUrl,type:this.type,data:this.postData,dataType:this.dataType,headers:this.headers,success:function(b){if(b.errors){$.each(b.errors,function(a,b){console.log(a);$(a).css("border","1px solid red")})}if(a)a(b)},error:function(a){if(DEBUG==true){console.log("WARNING: ajaxUrl or response is invalid")}}})}else if(DEBUG==true){response="";if(this.ajaxUrl==null||this.ajaxUrl=="")response+="ajaxUrl is not defined";if(this.postData==gather_data_fail)response+="postData is empty after atempt to gather data";console.log("WARNING: "+response);return false}}};Object.defineProperty(Object.prototype,"merge",{enumerable:false,value:function(){var a=true,b=this,c=arguments.length,d,e,f,g;if(typeof arguments[arguments.length-1]==="boolean"){a=arguments[arguments.length-1];c=arguments.length-1}for(f=0;f<c;f++){g=arguments[f];if(g!=null){Object.getOwnPropertyNames(g).forEach(function(c){var d;if((typeof b[c]==="object"||typeof b[c]==="undefined")&&typeof g[c]==="object"){if(typeof b[c]==="undefined"){b[c]=Array.isArray(g[c])?[]:{}}b[c].merge(g[c],a)}else if(c in b&&a||!(c in b)){d=Object.getOwnPropertyDescriptor(g,c);if(d.configurable){Object.defineProperty(b,c,d)}}})}}return this}})